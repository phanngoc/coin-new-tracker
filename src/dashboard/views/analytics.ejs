<%- include('layouts/header') %>

<!-- Chỉ số thị trường -->
<div class="row mb-4">
    <div class="col-lg-12">
        <div class="card border-primary">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0"><i class="fas fa-chart-line me-2"></i>Crypto Social Analytics Dashboard</h5>
            </div>
            <div class="card-body">
                <p class="card-text">Phân tích dữ liệu từ Twitter để theo dõi xu hướng thị trường crypto và lượng quan tâm của cộng đồng.</p>
            </div>
        </div>
    </div>
</div>

<!-- Chỉ số thị trường -->
<div class="row mb-4">
    <div class="col-md-4">
        <div class="card border-info h-100">
            <div class="card-header bg-info text-white">
                <h5 class="card-title mb-0"><i class="fas fa-thermometer-half me-2"></i>Chỉ số cảm xúc thị trường</h5>
            </div>
            <div class="card-body text-center">
                <h2 class="display-4 <%= marketClass %>"><%= marketSentiment %>%</h2>
                <h3 class="mb-3 <%= marketClass %>"><%= marketStatus %></h3>
                <div class="progress mb-3" style="height: 30px;">
                    <div class="progress-bar bg-danger" role="progressbar" style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100">
                        Sợ hãi
                    </div>
                    <div class="progress-bar bg-warning" role="progressbar" style="width: 40%" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100">
                        Trung lập
                    </div>
                    <div class="progress-bar bg-success" role="progressbar" style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100">
                        Tham lam
                    </div>
                </div>
                <p class="text-muted">Chỉ số dựa trên tỷ lệ tweets tích cực/tiêu cực trong 3 ngày qua</p>
            </div>
        </div>
    </div>
    
    <div class="col-md-8">
        <div class="card border-info h-100">
            <div class="card-header bg-info text-white">
                <h5 class="card-title mb-0"><i class="fas fa-comments me-2"></i>Lượng tweets theo ngày (7 ngày qua)</h5>
            </div>
            <div class="card-body">
                <canvas id="volumeChart" height="200"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Biểu đồ giá Coin -->
<div class="row mb-4">
    <div class="col-md-5">
        <div class="card h-100">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0"><i class="fas fa-coins me-2"></i>Bảng giá Crypto</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover table-striped">
                        <thead>
                            <tr>
                                <th>Coin</th>
                                <th>Giá hiện tại</th>
                                <th>24h %</th>
                                <th>Volume 24h</th>
                                <th>Market Cap</th>
                            </tr>
                        </thead>
                        <tbody id="crypto-price-table">
                            <tr>
                                <td colspan="5" class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Đang tải...</span>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-7">
        <div class="card h-100">
            <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="fas fa-chart-line me-2"></i>Biểu đồ giá</h5>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-sm btn-light active" data-coin="BTC">BTC</button>
                    <button type="button" class="btn btn-sm btn-light" data-coin="ETH">ETH</button>
                    <button type="button" class="btn btn-sm btn-light" data-coin="BNB">BNB</button>
                    <button type="button" class="btn btn-sm btn-light" data-coin="SOL">SOL</button>
                </div>
            </div>
            <div class="card-body">
                <div>
                    <div class="btn-group mb-3" role="group">
                        <button type="button" class="btn btn-sm btn-outline-primary active" data-interval="1d">1D</button>
                        <button type="button" class="btn btn-sm btn-outline-primary" data-interval="1w">1W</button>
                        <button type="button" class="btn btn-sm btn-outline-primary" data-interval="1m">1M</button>
                        <button type="button" class="btn btn-sm btn-outline-primary" data-interval="3m">3M</button>
                    </div>
                    <div class="chart-container" style="position: relative; height: 300px;">
                        <canvas id="cryptoChart"></canvas>
                    </div>
                    <div class="mt-2">
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="showMA" checked>
                            <label class="form-check-label" for="showMA">MA (7,25)</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="showEMA" checked>
                            <label class="form-check-label" for="showEMA">EMA (7,25)</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="showVolume" checked>
                            <label class="form-check-label" for="showVolume">Khối lượng</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Phân tích Coin và Sentiment -->
<div class="row mb-4">
    <div class="col-md-8">
        <div class="card border-success">
            <div class="card-header bg-success text-white">
                <h5 class="card-title mb-0"><i class="fas fa-coins me-2"></i>Top Coins Được Đề Cập</h5>
            </div>
            <div class="card-body">
                <% if (topCoins && topCoins.length > 0) { %>
                    <div class="table-responsive">
                        <table class="table table-hover align-middle">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Coin</th>
                                    <th scope="col">Đề cập</th>
                                    <th scope="col">Sentiment</th>
                                    <th scope="col">Xu hướng</th>
                                    <th scope="col">Giá 24h</th>
                                    <th scope="col">Đề xuất</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% topCoins.forEach((coin, index) => { 
                                    const total = coin.count;
                                    const positive = coin.positiveTweets || 0;
                                    const negative = coin.negativeTweets || 0;
                                    const sentimentScore = total > 0 ? ((positive - negative) / total) : 0;
                                    
                                    let sentimentClass = 'bg-warning';
                                    let sentimentLabel = 'Trung lập';
                                    
                                    if (sentimentScore > 0.3) {
                                        sentimentClass = 'bg-success';
                                        sentimentLabel = 'Tích cực';
                                    } else if (sentimentScore < -0.3) {
                                        sentimentClass = 'bg-danger';
                                        sentimentLabel = 'Tiêu cực';
                                    }
                                    
                                    // Tính toán đề xuất đơn giản
                                    let recommendation = 'Giữ';
                                    let recommendClass = 'bg-warning';
                                    
                                    if (priceChanges[coin._id] > 0 && sentimentScore > 0.2) {
                                        recommendation = 'Mua';
                                        recommendClass = 'bg-success';
                                    } else if (priceChanges[coin._id] < 0 && sentimentScore < -0.2) {
                                        recommendation = 'Bán';
                                        recommendClass = 'bg-danger';
                                    }
                                %>
                                    <tr>
                                        <th scope="row"><%= index + 1 %></th>
                                        <td>
                                            <strong><%= coin._id %></strong>
                                        </td>
                                        <td>
                                            <span class="badge bg-primary rounded-pill"><%= coin.count %></span>
                                            <% if (coinTrendChanges[coin._id]) { %>
                                                <small class="<%= coinTrendChanges[coin._id].class %>">
                                                    <% if (coinTrendChanges[coin._id].change > 0) { %>
                                                        <i class="fas fa-arrow-up"></i>
                                                    <% } else if (coinTrendChanges[coin._id].change < 0) { %>
                                                        <i class="fas fa-arrow-down"></i>
                                                    <% } else { %>
                                                        <i class="fas fa-minus"></i>
                                                    <% } %>
                                                    <%= coinTrendChanges[coin._id].change %>%
                                                </small>
                                            <% } %>
                                        </td>
                                        <td>
                                            <span class="badge <%= sentimentClass %> rounded-pill"><%= sentimentLabel %></span>
                                        </td>
                                        <td>
                                            <% if (coinTrends[coin._id]) { %>
                                                <small class="d-block text-center">
                                                    <canvas id="trendChart_<%= coin._id %>" height="30" width="80" class="mx-auto"></canvas>
                                                </small>
                                            <% } %>
                                        </td>
                                        <td class="<%= priceChangeColors[coin._id] %>">
                                            <% if (priceChanges[coin._id] > 0) { %>
                                                <i class="fas fa-arrow-up me-1"></i>
                                            <% } else if (priceChanges[coin._id] < 0) { %>
                                                <i class="fas fa-arrow-down me-1"></i>
                                            <% } %>
                                            <%= priceChanges[coin._id] %>%
                                        </td>
                                        <td>
                                            <span class="badge <%= recommendClass %> rounded-pill"><%= recommendation %></span>
                                        </td>
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                <% } else { %>
                    <div class="alert alert-info">
                        Chưa có dữ liệu về coins.
                    </div>
                <% } %>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card border-warning h-100">
            <div class="card-header bg-warning text-dark">
                <h5 class="card-title mb-0"><i class="fas fa-chart-pie me-2"></i>Phân Tích Cảm Xúc</h5>
            </div>
            <div class="card-body">
                <canvas id="sentimentChart" height="280"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Xu hướng và tài khoản có ảnh hưởng -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card border-danger h-100">
            <div class="card-header bg-danger text-white">
                <h5 class="card-title mb-0"><i class="fas fa-fire me-2"></i>Xu Hướng Mới Nổi (48h qua)</h5>
            </div>
            <div class="card-body">
                <div class="d-flex flex-wrap justify-content-center">
                    <% if (emergingTrends && emergingTrends.length > 0) { %>
                        <% emergingTrends.forEach((trend, index) => { 
                            const fontSize = 14 + Math.min(trend.count, 20);
                        %>
                            <a href="/hashtag/<%= trend._id %>" class="badge rounded-pill me-2 mb-2" 
                               style="font-size: <%= fontSize %>px; background-color: <%= ['#fd7e14', '#6f42c1', '#20c997', '#e83e8c', '#6610f2', '#fd7e14', '#17a2b8'][index % 7] %>; color: white;">
                                #<%= trend._id %> <span class="badge bg-light text-dark"><%= trend.count %></span>
                            </a>
                        <% }); %>
                    <% } else { %>
                        <div class="alert alert-info">
                            Chưa có dữ liệu về xu hướng mới.
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card border-primary h-100">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0"><i class="fas fa-users me-2"></i>Tài Khoản Có Ảnh Hưởng</h5>
            </div>
            <div class="card-body">
                <div class="list-group">
                    <% if (topAccounts && topAccounts.length > 0) { %>
                        <% topAccounts.forEach((account, index) => { %>
                            <a href="/account/<%= account._id %>" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="badge bg-secondary rounded-pill me-2"><%= index + 1 %></span>
                                    <i class="fab fa-twitter text-primary me-2"></i>
                                    <strong>@<%= account._id %></strong>
                                </div>
                                <span class="badge bg-primary rounded-pill"><%= account.count %> tweets</span>
                            </a>
                        <% }); %>
                    <% } else { %>
                        <div class="alert alert-info">
                            Chưa có dữ liệu về tài khoản.
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Chart.js configuration
document.addEventListener('DOMContentLoaded', function() {
    // Biểu đồ lượng tweets theo ngày
    const volumeCtx = document.getElementById('volumeChart').getContext('2d');
    const volumeChart = new Chart(volumeCtx, {
        type: 'line',
        data: {
            labels: <%- JSON.stringify(dailyTweets.labels) %>,
            datasets: [{
                label: 'Số lượng tweets',
                data: <%- JSON.stringify(dailyTweets.data) %>,
                fill: true,
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgb(54, 162, 235)',
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    
    // Biểu đồ sentiment
    const sentimentCtx = document.getElementById('sentimentChart').getContext('2d');
    const sentimentChart = new Chart(sentimentCtx, {
        type: 'pie',
        data: {
            labels: ['Tích cực', 'Tiêu cực', 'Trung lập'],
            datasets: [{
                data: [
                    <%= sentimentData.positive.reduce((a, b) => a + b, 0) %>,
                    <%= sentimentData.negative.reduce((a, b) => a + b, 0) %>,
                    <%= sentimentData.neutral.reduce((a, b) => a + b, 0) %>
                ],
                backgroundColor: [
                    'rgba(40, 167, 69, 0.7)',
                    'rgba(220, 53, 69, 0.7)',
                    'rgba(255, 193, 7, 0.7)'
                ],
                borderColor: [
                    'rgb(40, 167, 69)',
                    'rgb(220, 53, 69)',
                    'rgb(255, 193, 7)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });
    
    // Biểu đồ mini cho từng coin
    <% Object.keys(coinTrends).forEach(coinId => { %>
        <% if (coinTrends[coinId]) { %>
            const trendCtx_<%= coinId %> = document.getElementById('trendChart_<%= coinId %>');
            if (trendCtx_<%= coinId %>) {
                const ctx = trendCtx_<%= coinId %>.getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: Array(<%- coinTrends[coinId].mentions.length %>).fill(''),
                        datasets: [{
                            data: <%- JSON.stringify(coinTrends[coinId].mentions) %>,
                            borderColor: 'rgb(54, 162, 235)',
                            borderWidth: 2,
                            pointRadius: 0,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                enabled: false
                            }
                        },
                        scales: {
                            x: {
                                display: false
                            },
                            y: {
                                display: false
                            }
                        }
                    }
                });
            }
        <% } %>
    <% }); %>
    
    // Tải bảng giá coin
    loadCryptoPrices();
    
    // Khởi tạo biểu đồ nến
    initCryptoChart();
});

// Hàm tải bảng giá
function loadCryptoPrices() {
    const priceTable = document.getElementById('crypto-price-table');
    if (!priceTable) return;
    
    // Dữ liệu từ server (trong thực tế, dữ liệu có thể được lấy từ API)
    const coins = [
        { symbol: 'BTC', name: 'Bitcoin', price: 61234.56, change24h: <%= priceChanges.BTC || 0 %>, volume24h: 32500000000, marketCap: 1250000000000 },
        { symbol: 'ETH', name: 'Ethereum', price: 3245.78, change24h: <%= priceChanges.ETH || 0 %>, volume24h: 18700000000, marketCap: 365000000000 },
        { symbol: 'BNB', name: 'Binance Coin', price: 412.34, change24h: <%= priceChanges.BNB || 0 %>, volume24h: 2300000000, marketCap: 68000000000 },
        { symbol: 'SOL', name: 'Solana', price: 124.56, change24h: <%= priceChanges.SOL || 0 %>, volume24h: 3400000000, marketCap: 42000000000 },
        { symbol: 'XRP', name: 'Ripple', price: 0.5678, change24h: <%= priceChanges.XRP || 0 %>, volume24h: 1800000000, marketCap: 28000000000 }
    ];
    
    // Xóa spinner và hiển thị dữ liệu
    priceTable.innerHTML = '';
    
    coins.forEach(coin => {
        const tr = document.createElement('tr');
        
        tr.innerHTML = `
            <td>
                <div class="d-flex align-items-center">
                    <img src="https://cryptologos.cc/logos/${coin.name.toLowerCase()}-${coin.symbol.toLowerCase()}-logo.png" 
                         alt="${coin.symbol}" width="24" height="24" class="me-2" 
                         onerror="this.onerror=null; this.src='/images/default-coin.png';">
                    <strong>${coin.symbol}</strong>
                </div>
            </td>
            <td>$${coin.price.toLocaleString()}</td>
            <td class="${coin.change24h >= 0 ? 'text-success' : 'text-danger'}">
                ${coin.change24h >= 0 ? '+' : ''}${coin.change24h.toFixed(2)}%
            </td>
            <td>$${(coin.volume24h / 1000000).toFixed(0)}M</td>
            <td>$${(coin.marketCap / 1000000000).toFixed(0)}B</td>
        `;
        
        priceTable.appendChild(tr);
    });
}

// Dữ liệu từ server
const coinPriceData = <%- JSON.stringify(coinPriceData) %>;

// Sử dụng biến cryptoChartAnalytics thay vì cryptoChart để tránh xung đột
let cryptoChartAnalytics = null;
let analyticsCurrentCoin = 'BTC';
let analyticsCurrentInterval = '1d';

// Hàm tính Moving Average
function calculateMA(data, period) {
    const result = [];
    for (let i = 0; i < data.length; i++) {
        if (i < period - 1) {
            result.push(null);
            continue;
        }
        
        let sum = 0;
        for (let j = 0; j < period; j++) {
            sum += data[i - j].close;
        }
        result.push(sum / period);
    }
    return result;
}

// Hàm tính Exponential Moving Average
function calculateEMA(data, period) {
    const result = [];
    const k = 2 / (period + 1);
    
    // Dùng SMA làm giá trị EMA đầu tiên
    let ema = calculateMA(data.slice(0, period), period)[period - 1];
    
    for (let i = 0; i < data.length; i++) {
        if (i < period - 1) {
            result.push(null);
            continue;
        }
        
        if (i === period - 1) {
            result.push(ema);
            continue;
        }
        
        ema = data[i].close * k + ema * (1 - k);
        result.push(ema);
    }
    
    return result;
}

// Hàm khởi tạo biểu đồ giá
function initCryptoChart() {
    const chartCanvas = document.getElementById('cryptoChart');
    if (!chartCanvas) return;
    
    // Nếu biểu đồ đã tồn tại, hủy nó trước
    if (cryptoChartAnalytics) {
        cryptoChartAnalytics.destroy();
        cryptoChartAnalytics = null;
    }
    
    try {
        const ctx = chartCanvas.getContext('2d');
        
        // Khởi tạo biểu đồ nến
        cryptoChartAnalytics = new Chart(ctx, {
            type: 'candlestick',
            data: {
                datasets: []
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'day'
                        },
                        adapters: {
                            date: {
                                locale: 'vi'
                            }
                        }
                    },
                    y: {
                        position: 'right'
                    },
                    volume: {
                        position: 'left',
                        display: true,
                        grid: {
                            drawOnChartArea: false
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false
                    }
                }
            }
        });

        console.log('analyticsCurrentCoin:', analyticsCurrentCoin);
        console.log('coinPriceData:', coinPriceData);
        console.log('cryptoChartAnalytics:', cryptoChartAnalytics);
        console.log('cryptoChartAnalytics.data.datasets:', cryptoChartAnalytics.data.datasets);
        console.log('cryptoChartAnalytics.data:', cryptoChartAnalytics.data);
        console.log('cryptoChartAnalytics.options:', cryptoChartAnalytics.options);
        // Cập nhật dữ liệu ban đầu
        updateChartData(analyticsCurrentCoin);
        
        // Xử lý các nút chọn coin
        document.querySelectorAll('[data-coin]').forEach(button => {
            button.addEventListener('click', function() {
                document.querySelectorAll('[data-coin]').forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
                analyticsCurrentCoin = this.getAttribute('data-coin');
                updateChartData(analyticsCurrentCoin);
            });
        });
        
        // Xử lý các nút chọn khoảng thời gian
        document.querySelectorAll('[data-interval]').forEach(button => {
            button.addEventListener('click', function() {
                document.querySelectorAll('[data-interval]').forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
                analyticsCurrentInterval = this.getAttribute('data-interval');
                updateChartData(analyticsCurrentCoin);
            });
        });
        
        // Xử lý các checkbox hiển thị chỉ báo
        document.getElementById('showMA')?.addEventListener('change', function() {
            updateChartData(analyticsCurrentCoin);
        });
        
        document.getElementById('showEMA')?.addEventListener('change', function() {
            updateChartData(analyticsCurrentCoin);
        });
        
        document.getElementById('showVolume')?.addEventListener('change', function() {
            updateChartData(analyticsCurrentCoin);
        });
    } catch (error) {
        console.error('Lỗi khi khởi tạo biểu đồ:', error);
    }
}

// Hàm cập nhật dữ liệu biểu đồ
function updateChartData(coin) {
    if (!cryptoChartAnalytics || !coinPriceData[coin]) return;
    
    const data = coinPriceData[coin];
    console.log('Dữ liệu biểu đồ:', data, coin, coinPriceData);
    const showMA = document.getElementById('showMA')?.checked ?? true;
    const showEMA = document.getElementById('showEMA')?.checked ?? true;
    const showVolume = document.getElementById('showVolume')?.checked ?? true;
    
    // Xóa dữ liệu cũ
    cryptoChartAnalytics.data.datasets = [];
    
    // Thêm dữ liệu nến
    cryptoChartAnalytics.data.datasets.push({
        label: `${coin} Price`,
        data: data.map(d => ({
            x: new Date(d.time),
            o: d.open,
            h: d.high,
            l: d.low,
            c: d.close
        })),
        type: 'candlestick',
        candleStick: {
            color: {
                up: 'rgba(75, 192, 192, 1)',
                down: 'rgba(255, 99, 132, 1)',
                unchanged: 'rgba(90, 90, 90, 1)',
            }
        }
    });
    
    // Thêm đường MA nếu được chọn
    if (showMA) {
        const ma7 = calculateMA(data, 7);
        const ma25 = calculateMA(data, 25);
        
        cryptoChartAnalytics.data.datasets.push({
            label: 'MA(7)',
            data: ma7.map((value, index) => ({ x: new Date(data[index]?.time), y: value })),
            borderColor: 'rgba(255, 159, 64, 1)',
            borderWidth: 2,
            fill: false,
            tension: 0.1,
            pointRadius: 0,
            type: 'line',
            yAxisID: 'y'
        });
        
        cryptoChartAnalytics.data.datasets.push({
            label: 'MA(25)',
            data: ma25.map((value, index) => ({ x: new Date(data[index]?.time), y: value })),
            borderColor: 'rgba(153, 102, 255, 1)',
            borderWidth: 2,
            fill: false,
            tension: 0.1,
            pointRadius: 0,
            type: 'line',
            yAxisID: 'y'
        });
    }
    
    // Thêm đường EMA nếu được chọn
    if (showEMA) {
        const ema7 = calculateEMA(data, 7);
        const ema25 = calculateEMA(data, 25);
        
        cryptoChartAnalytics.data.datasets.push({
            label: 'EMA(7)',
            data: ema7.map((value, index) => ({ x: new Date(data[index]?.time), y: value })),
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 2,
            fill: false,
            tension: 0.1,
            pointRadius: 0,
            type: 'line',
            borderDash: [5, 5],
            yAxisID: 'y'
        });
        
        cryptoChartAnalytics.data.datasets.push({
            label: 'EMA(25)',
            data: ema25.map((value, index) => ({ x: new Date(data[index]?.time), y: value })),
            borderColor: 'rgba(255, 206, 86, 1)',
            borderWidth: 2,
            fill: false,
            tension: 0.1,
            pointRadius: 0,
            type: 'line',
            borderDash: [5, 5],
            yAxisID: 'y'
        });
    }
    
    // Thêm khối lượng nếu được chọn
    if (showVolume) {
        cryptoChartAnalytics.data.datasets.push({
            label: 'Volume',
            data: data.map(d => ({ x: new Date(d.time), y: d.volume })),
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            type: 'bar',
            yAxisID: 'volume'
        });
    }
    
    // Cập nhật biểu đồ
    cryptoChartAnalytics.update();
}
</script>

<%- include('layouts/footer') %> 